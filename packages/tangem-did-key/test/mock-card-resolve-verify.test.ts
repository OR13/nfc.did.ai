import crypto from 'crypto';

const { Ed25519KeyPair } = require('crypto-ld');
// const { keyToDidDoc } = require('did-method-key').driver();
const bs58 = require('bs58');

const card = {
  '90': '',
  CID: 'BB03000000000004',
  Manufacturer_ID: '54414E47454D00',
  Status: '02',
  Firmware: '332E3035642053444B00',
  CARD_PUBLIC_KEY:
    '049110F1CA9733373CA6D0A126E5612B42544FF864E399893AA3E57C1359B481C0D404FDD6643DF03DC0B85755150272347CE7F7014C986E2D3D52EC63AC542242',
  Settings_Mask: '040E7E31',
  Card_Data:
    '8102FFFF8A0100820407E40606830B54414E47454D2053444B0084010A8640FD321236AD91D74D52EE64549AA0934AD17C63CB069C094DB594E825219C6B9CDEA76E6C710CA0F6A66A194AA210B211D4104BE33E93A7ACCC1D642CFADA2765',
  ISSUER_PUBLIC_KEY:
    '045F16BD1D2EAFE463E62A335A09E6B2BBCBD04452526885CB679FC4D27AF1BD22F553C7DEEFB54FD3D4F361D14E6DC3F11B7D4EA183250A60720EBDF9E110CD26',
  Curve_ID: '6564323535313900',
  Max_Signatures: '000F423F',
  Signing_Method: '01',
  WALLET_PUBLIC_KEY:
    '4E64A2F1489032A08DBF95AE0A483E00C7A1090CD60606634D2366D02097DDB4',
  Wallet_Remaining_Signatures: '000F423C',
  Wallet_Signed_Hashes: '00000003',
  Health: '00',
};

const signRequest = {
  CLA: '00',
  INS: 'FB',
  P1: '00',
  P2: '00',
  Lc: '00',
  Tag: '01',
  Length: '39',
  Value:
    '102091B4D142823F7D20C5F08DF69122DE43F35F057A988D9619F6D3138485C9A2030108BB0300000000000411202AC9A6746ACA543AF8DFF39894CFE8173AFBA21EB01C6FAE33D52947222855EF52402705649CD255A07EFDF3528B4D63FB60CE18C85E403F66D3BA7F1F63D476A3E34225F6F5659785180C313895EEFEB1B4340E897210C7F770BE2A1C7142435B9E06077368612D353132',
  Parsed_Value: {
    PIN1: '91B4D142823F7D20C5F08DF69122DE43F35F057A988D9619F6D3138485C9A203',
    CID: 'BB03000000000004',
    PIN2: '2AC9A6746ACA543AF8DFF39894CFE8173AFBA21EB01C6FAE33D52947222855EF',
    Transaction_Raw:
      '2705649CD255A07EFDF3528B4D63FB60CE18C85E403F66D3BA7F1F63D476A3E34225F6F5659785180C313895EEFEB1B4340E897210C7F770BE2A1C7142435B9E',
    Hash_Name: 'sha-512',
  },
};

const signResponse = {
  '90': '',
  CID: 'BB03000000000004',
  Transaction_Hash:
    'AED9605F8560C31DBF29C55369B6C89CE5AB981E7D2135C8F9C61F568298DEE7F57758FD3E5A5F114FE9DBE7E3EE90A4F3CBE85AA0BCF395D103BDC67F8580B3',
  Wallet_Signature:
    '71DCCCEDD9E903593B0CC3F8306374B59A25717B0840007A300677C310CA9DBEDDD5F74426961C146689C3622AFCF473F3A6B0D739DF36BAB9FE5EF92631380D',
  Wallet_Remaining_Signatures: '000F423D',
  Wallet_Signed_Hashes: '00000002',
};

describe('mock-resolve-verify', () => {
  it('can verify a signed transaction', async () => {
    let publicKey = Buffer.from(card.WALLET_PUBLIC_KEY, 'hex');
    const key = new Ed25519KeyPair({
      publicKeyBase58: bs58.encode(publicKey),
    });

    const verifier = key.verifier();

    const txHash = crypto
      .createHash('sha512')
      .update(Buffer.from(signRequest.Parsed_Value.Transaction_Raw, 'hex'))
      .digest('hex')
      .toUpperCase();

    expect(txHash).toBe(signResponse.Transaction_Hash);

    const verified = await verifier.verify({
      data: Buffer.from(signResponse.Transaction_Hash, 'hex'),
      signature: Buffer.from(signResponse.Wallet_Signature, 'hex'),
    });
    expect(verified).toBe(true);
  });
});
